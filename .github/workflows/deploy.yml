name: Deploy to GCP

on:
  workflow_run:
    workflows: ["Lint and Test"]
    types: [completed]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Select the deployment environment"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production

env:
  GCP_PROJECT_ID: jrw-demo-project
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: johnwebb-app-backend
  FRONTEND_BUCKET_NAME: johnwebb-app-frontend-dev

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: success() && github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'feat/deployment')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Pulumi
        uses: pulumi/actions@v6

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Pulumi dependencies
        working-directory: infra
        run: |
          pip install -r requirements.txt

      - name: Testing
        run: |
          echo ${{ env.GCP_PROJECT_ID }}
          echo ${{ env.GCP_REGION }}

      - name: Deploy infrastructure
        uses: pulumi/actions@v6
        id: pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        with:
          command: up
          stack-name: dev
          work-dir: infra
          debug: true

      - name: Echo infrastructure deployment status
        run: |
          echo "Infrastructure deployed successfully!"

  build-and-deploy-backend:
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

      - name: Build and push backend image
        working-directory: backend
        run: |
          IMAGE="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/backend-repo/$BACKEND_SERVICE_NAME:$GITHUB_SHA"
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Cloud Run
        working-directory: backend
        run: |
          IMAGE="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/backend-repo/$BACKEND_SERVICE_NAME:$GITHUB_SHA"
          gcloud run deploy $BACKEND_SERVICE_NAME \
            --image $IMAGE \
            --region $GCP_REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10

  build-and-deploy-frontend:
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Get backend URL
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --format="value(status.url)")
          echo "VITE_API_BASE_URL=$BACKEND_URL" >> $GITHUB_ENV

      - name: Install frontend dependencies and build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Install Pulumi
        uses: pulumi/actions@v6

      - name: Pulumi Login
        run: pulumi login
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Deploy to Cloud Storage
        run: |
          # Get the bucket name from Pulumi output
          BUCKET_NAME=$(pulumi stack output frontend_bucket_name --cwd infra)

          # Sync built files to bucket
          gsutil -m rsync -r -d frontend/dist/ gs://$BUCKET_NAME/

          # Make files publicly readable
          gsutil -m acl ch -r -u AllUsers:R gs://$BUCKET_NAME/

  notify:
    needs: [build-and-deploy-backend, build-and-deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy-backend.result }}" == "success" ] && [ "${{ needs.build-and-deploy-frontend.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
