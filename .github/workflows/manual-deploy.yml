name: Manual Deployment

# This workflow allows for manual deployment of both frontend and backend services.
# In the case that developers need to force a deployment
# they can trigger this workflow from the GitHub Actions tab.

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      stack:
        description: "Pulumi Stack Name (e.g., dev, staging, prod)"
        required: true
        default: "dev"
      tag:
        description: "Used for image version (defaults to current SHA)"
        required: false
        default: ${{ github.sha }}

env:
  GCP_PROJECT_ID: jrw-demo-project
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: johnwebb-app-backend
  FRONTEND_SERVICE_NAME: johnwebb-app-frontend
  REPOSITORY: backend-repo

jobs:
  # Frontend Build Job
  build_frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend_image_url: ${{ steps.build_and_publish.outputs.IMAGE_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      # --- Frontend Lint and Test Steps ---
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies and run linting
        working-directory: frontend
        run: |
          npm ci
          npm run lint
          npm run test:ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        id: build_and_publish
        working-directory: frontend
        run: |
          # Use the user-provided 'tag' input
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.event.inputs.tag }}"
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT

  # Backend Build Job
  build_backend:
    runs-on: ubuntu-latest
    outputs:
      backend_image_url: ${{ steps.build_and_publish.outputs.IMAGE_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies and run linting
        working-directory: backend
        run: |
          pip install -r requirements-dev.txt
          # Run linting and tests
          isort --check-only app/
          black --check app/
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push backend image
        id: build_and_publish
        working-directory: backend
        run: |
          # Use the user-provided 'tag' input
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.BACKEND_SERVICE_NAME }}:${{ github.event.inputs.tag }}"
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT

  # Deploy Job
  deploy:
    needs: [build_frontend, build_backend]
    runs-on: ubuntu-latest
    # Simple if condition: only proceed if ALL needed jobs succeeded.
    if: success()

    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      # Use the 'stack' input provided by the user in the trigger form
      PULUMI_STACK: ${{ github.event.inputs.stack }}
      INFRA_DIR: infra

      # Image URLs are guaranteed to be present since both jobs are mandatory
      FRONTEND_IMAGE_URL: ${{ needs.build_frontend.outputs.frontend_image_url }}
      BACKEND_IMAGE_URL: ${{ needs.build_backend.outputs.backend_image_url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup Pulumi
        uses: pulumi/actions@v6

      - name: Install Pulumi dependencies
        working-directory: ${{ env.INFRA_DIR }}
        run: pip install -r requirements.txt

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Update Pulumi Config with New Image URL
        run: |
          echo "NEW_BACKEND_IMAGE: ${{ env.BACKEND_IMAGE_URL }}"
          # Since this is a forced deployment, we update both configs unconditionally.
          pulumi config set backend_image --stack ${{ env.PULUMI_STACK }} "${{ env.BACKEND_IMAGE_URL }}" --non-interactive --cwd ${{ env.INFRA_DIR }}

          echo "NEW_FRONTEND_IMAGE: ${{ env.FRONTEND_IMAGE_URL }}"
          pulumi config set frontend_image --stack ${{ env.PULUMI_STACK }} "${{ env.FRONTEND_IMAGE_URL }}" --non-interactive --cwd ${{ env.INFRA_DIR }}

      - name: Deploy Infrastructure
        uses: pulumi/actions@v6
        id: pulumi-up
        with:
          command: up
          stack-name: ${{ env.PULUMI_STACK }}
          work-dir: ${{ env.INFRA_DIR }}
          debug: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Echo infrastructure deployment status
        run: echo "Infrastructure deployed successfully to ${{ env.PULUMI_STACK }}!"
